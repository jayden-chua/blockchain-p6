// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require('SquareVerifier');
const zkProof = require('../../zokrates/code/square/proof.json');

contract('TestSquareVerifier', accounts => {
    const owner = accounts[0];

    describe('check verifier', () => {
        beforeEach(async () => {
            this.contract = await SquareVerifier.new({ from: owner });
        });

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('should verify with correct proof', async () => {
            let result = await this.contract.verifyTx.call(...Object.values(zkProof.proof), zkProof.inputs);
            assert.equal(result, true);
        });

        // Test verification with incorrect proof
        it('should not verify with wrong proof', async () => {
            let result = await this.contract.verifyTx.call(...Object.values(zkProof.proof), [2, 4]);
            assert.equal(result, false);
        });
    });
});



    

